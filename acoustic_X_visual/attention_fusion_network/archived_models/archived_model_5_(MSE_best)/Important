>>> from load_model import load_model
Using TensorFlow backend.
>>> from load_data import load_training_data, load_development_data
>>> import numpy as np
>>> import os
>>> os.environ["CUDA_VISIBLE_DEVICES"]="2"
>>> model = load_model()
Created a new model.
>>> model.load_weights('best_weights.h5')
2018-11-04 19:02:08.940298: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
2018-11-04 19:02:09.228792: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 0 with properties:
name: GeForce GTX 1080 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.582
pciBusID: 0000:88:00.0
totalMemory: 10.91GiB freeMemory: 10.53GiB
2018-11-04 19:02:09.228869: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:88:00.0, compute capability: 6.1)
>>> model.compile(optimizer='adam', loss='mse', metrics = ['mae'])
>>> dev_COVAREP_X_FORMANT, dev_facial_X_pose, dev_gaze_X_action, dev_Y, dev_X_gender = load_development_data()
Development data is loaded.
>>> loss_dev = model.predict([dev_COVAREP_X_FORMANT, dev_facial_X_pose, dev_gaze_X_action, dev_X_gender])
>>> loss_dev
[array([[ 2.6686587 ],
       [ 2.5432804 ],
       [ 8.9307785 ],
       [ 9.564537  ],
       [ 9.953475  ],
       [11.849984  ],
       [11.38801   ],
       [ 6.961457  ],
       [ 5.419585  ],
       [14.483858  ],
       [11.938816  ],
       [ 7.39417   ],
       [ 7.5423    ],
       [ 2.4334533 ],
       [ 7.758212  ],
       [ 7.223177  ],
       [11.189612  ],
       [ 1.2427244 ],
       [11.825952  ],
       [ 2.9329715 ],
       [ 9.547926  ],
       [ 4.872655  ],
       [ 0.8352475 ],
       [12.835686  ],
       [ 9.600684  ],
       [ 0.76100254],
       [ 3.4030762 ],
       [11.593059  ],
       [ 2.3200765 ],
       [ 9.236991  ],
       [ 4.41158   ],
       [ 3.31271   ],
       [ 1.9418714 ]], dtype=float32), array([[2.7554049e-07, 9.9999726e-01, 2.5590502e-06],
       [1.8308739e-06, 9.9931931e-01, 6.7894073e-04],
       [3.8537215e-05, 9.6632862e-01, 3.3632785e-02],
       [3.8730897e-05, 9.6590471e-01, 3.4056634e-02],
       [3.8732425e-05, 9.6590126e-01, 3.4060083e-02],
       [3.8707298e-05, 9.6595621e-01, 3.4005087e-02],
       [2.5611453e-05, 9.8540640e-01, 1.4567986e-02],
       [3.2189317e-05, 9.7840232e-01, 2.1565506e-02],
       [3.1820386e-05, 9.7900659e-01, 2.0961531e-02],
       [3.8729366e-05, 9.6590793e-01, 3.4053426e-02],
       [3.8727561e-05, 9.6591169e-01, 3.4049571e-02],
       [3.1844989e-05, 9.7896314e-01, 2.1005001e-02],
       [3.8304701e-05, 9.6684521e-01, 3.3116486e-02],
       [2.1478088e-06, 9.9909365e-01, 9.0422633e-04],
       [3.2197357e-05, 9.7838998e-01, 2.1577800e-02],
       [3.8214581e-05, 9.6704435e-01, 3.2917485e-02],
       [3.7836740e-05, 9.6784401e-01, 3.2118183e-02],
       [2.9046119e-05, 9.8411536e-01, 1.5855566e-02],
       [3.8681042e-05, 9.6601373e-01, 3.3947594e-02],
       [5.3251542e-06, 9.9743551e-01, 2.5591864e-03],
       [3.8724938e-05, 9.6591818e-01, 3.4043144e-02],
       [3.8728289e-05, 9.6591049e-01, 3.4050852e-02],
       [7.3581992e-07, 9.9951732e-01, 4.8201016e-04],
       [3.8732487e-05, 9.6590090e-01, 3.4060363e-02],
       [3.8729166e-05, 9.6590835e-01, 3.4052923e-02],
       [3.8732458e-05, 9.6590114e-01, 3.4060203e-02],
       [3.8731199e-05, 9.6590394e-01, 3.4057405e-02],
       [3.8695394e-05, 9.6598232e-01, 3.3979006e-02],
       [8.7251283e-06, 9.9655569e-01, 3.4356520e-03],
       [3.8703976e-05, 9.6596354e-01, 3.3997782e-02],
       [3.1971456e-05, 9.7877741e-01, 2.1190591e-02],
       [2.6598424e-05, 9.8482496e-01, 1.5148440e-02],
       [5.6456684e-06, 9.9739647e-01, 2.5978880e-03]], dtype=float32)]
>>> loss_dev[2]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list index out of range
>>> loss_dev[1]
array([[2.7554049e-07, 9.9999726e-01, 2.5590502e-06],
       [1.8308739e-06, 9.9931931e-01, 6.7894073e-04],
       [3.8537215e-05, 9.6632862e-01, 3.3632785e-02],
       [3.8730897e-05, 9.6590471e-01, 3.4056634e-02],
       [3.8732425e-05, 9.6590126e-01, 3.4060083e-02],
       [3.8707298e-05, 9.6595621e-01, 3.4005087e-02],
       [2.5611453e-05, 9.8540640e-01, 1.4567986e-02],
       [3.2189317e-05, 9.7840232e-01, 2.1565506e-02],
       [3.1820386e-05, 9.7900659e-01, 2.0961531e-02],
       [3.8729366e-05, 9.6590793e-01, 3.4053426e-02],
       [3.8727561e-05, 9.6591169e-01, 3.4049571e-02],
       [3.1844989e-05, 9.7896314e-01, 2.1005001e-02],
       [3.8304701e-05, 9.6684521e-01, 3.3116486e-02],
       [2.1478088e-06, 9.9909365e-01, 9.0422633e-04],
       [3.2197357e-05, 9.7838998e-01, 2.1577800e-02],
       [3.8214581e-05, 9.6704435e-01, 3.2917485e-02],
       [3.7836740e-05, 9.6784401e-01, 3.2118183e-02],
       [2.9046119e-05, 9.8411536e-01, 1.5855566e-02],
       [3.8681042e-05, 9.6601373e-01, 3.3947594e-02],
       [5.3251542e-06, 9.9743551e-01, 2.5591864e-03],
       [3.8724938e-05, 9.6591818e-01, 3.4043144e-02],
       [3.8728289e-05, 9.6591049e-01, 3.4050852e-02],
       [7.3581992e-07, 9.9951732e-01, 4.8201016e-04],
       [3.8732487e-05, 9.6590090e-01, 3.4060363e-02],
       [3.8729166e-05, 9.6590835e-01, 3.4052923e-02],
       [3.8732458e-05, 9.6590114e-01, 3.4060203e-02],
       [3.8731199e-05, 9.6590394e-01, 3.4057405e-02],
       [3.8695394e-05, 9.6598232e-01, 3.3979006e-02],
       [8.7251283e-06, 9.9655569e-01, 3.4356520e-03],
       [3.8703976e-05, 9.6596354e-01, 3.3997782e-02],
       [3.1971456e-05, 9.7877741e-01, 2.1190591e-02],
       [2.6598424e-05, 9.8482496e-01, 1.5148440e-02],
       [5.6456684e-06, 9.9739647e-01, 2.5978880e-03]], dtype=float32)
>>> loss_dev[1].shape
(33, 3)
>>> alphas = loss_dev[1]
>>> np.mean(alphas, axis=0)
array([2.9119552e-05, 9.7661346e-01, 2.3357330e-02], dtype=float32)
>>> np.mean(alphas, axis=0)/np.sum(np.mean(alphas, axis=0))
array([2.9119554e-05, 9.7661352e-01, 2.3357332e-02], dtype=float32)
>>> 100*np.mean(alphas, axis=0)/np.sum(np.mean(alphas, axis=0))
array([2.9119554e-03, 9.7661354e+01, 2.3357332e+00], dtype=float32)
>>> np.std(alphas, axis=0)
array([1.3844995e-05, 1.2965164e-02, 1.2951725e-02], dtype=float32)
>>> np.std(alphas, axis=0)/np.mean(alphas, axis=0)
array([0.4754536 , 0.01327564, 0.5545037 ], dtype=float32)
>>>